import { Component, ElementRef, ViewEncapsulation, EventEmitter, NgZone, Input, NgModule } from '@angular/core';
import { create, supported } from 'filepond';
export { registerPlugin } from 'filepond';
import { CommonModule } from '@angular/common';

var isSupported = supported();
var inputAttributes = [
    'id',
    'name',
    'class',
    'multiple',
    'required',
    'disabled',
    'capture',
    'accept'
];
var filteredComponentMethods = [
    'setOptions',
    'on',
    'off',
    'onOnce',
    'appendTo',
    'insertAfter',
    'insertBefore',
    'isAttachedTo',
    'replaceElement',
    'restoreElement',
    'destroy'
];
var outputs = [
    'oninit',
    'onwarning',
    'onerror',
    'onactivatefile',
    'onaddfilestart',
    'onaddfileprogress',
    'onaddfile',
    'onprocessfilestart',
    'onprocessfileprogress',
    'onprocessfileabort',
    'onprocessfilerevert',
    'onprocessfile',
    'onprocessfiles',
    'onremovefile',
    'onpreparefile',
    'onupdatefiles'
];
var FilePondComponent = /** @class */ (function () {
    function FilePondComponent(root, zone) {
        var _this = this;
        this.options = {};
        this.handleEvent = null;
        this.root = root;
        this.zone = zone;
        outputs.forEach(function (output) {
            _this[output] = new EventEmitter();
        });
    }
    FilePondComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        var input = this.root.nativeElement.querySelector('input');
        var attributes = this.root.nativeElement.attributes;
        inputAttributes.forEach(function (name) {
            var value = attributes[name] ? attributes[name].value : _this.options[name];
            if (!value) {
                return;
            }
            input.setAttribute(name, value);
        });
        if (!isSupported) {
            return;
        }
        this.handleEvent = function (e) {
            _this["on" + e.type.split(':')[1]].emit(Object.assign({}, e.detail));
        };
        outputs.forEach(function (event) {
            _this.root.nativeElement.addEventListener("FilePond:" + event.substr(2), _this.handleEvent);
        });
        this.zone.runOutsideAngular(function () {
            _this.pond = create(input, Object.assign({}, _this.options, { files: _this.files }));
        });
        Object.keys(this.pond)
            .filter(function (key) { return filteredComponentMethods.indexOf(key) === -1; })
            .forEach(function (key) {
            _this[key] = _this.pond[key];
        });
    };
    FilePondComponent.prototype.ngOnChanges = function (changes) {
        if (changes["firstChange"]) {
            return;
        }
        if (!this.pond) {
            return;
        }
        var options = changes["options"] ? changes["options"].currentValue : this.options;
        if (changes["files"] && JSON.stringify(changes["files"].previousValue) !== JSON.stringify(changes["files"].currentValue)) {
            options.files = changes["files"].currentValue;
        }
        this.pond.setOptions(options);
    };
    FilePondComponent.prototype.ngOnDestroy = function () {
        var _this = this;
        if (!this.pond) {
            return;
        }
        outputs.forEach(function (event) {
            _this.root.nativeElement.removeEventListener("FilePond:" + event.substr(2), _this.handleEvent);
        });
        this.pond.destroy();
    };
    return FilePondComponent;
}());
FilePondComponent.decorators = [
    { type: Component, args: [{
                selector: 'file-pond',
                encapsulation: ViewEncapsulation.None,
                template: "<div class=\"filepond--wrapper\">\n  <input type=\"file\"/>\n</div>",
                styles: [""],
                outputs: outputs
            },] },
];
FilePondComponent.ctorParameters = function () { return [
    { type: ElementRef, },
    { type: NgZone, },
]; };
FilePondComponent.propDecorators = {
    "options": [{ type: Input },],
    "files": [{ type: Input },],
};
var FilePondModule = /** @class */ (function () {
    function FilePondModule() {
    }
    return FilePondModule;
}());
FilePondModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [FilePondComponent],
                exports: [
                    FilePondComponent
                ]
            },] },
];

export { FilePondModule, FilePondComponent as Éµa };
//# sourceMappingURL=ngx-filepond.js.map
