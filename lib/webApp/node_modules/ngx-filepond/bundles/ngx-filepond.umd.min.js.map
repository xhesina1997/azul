{
  "version": 3,
  "file": "ngx-filepond.umd.min.js",
  "sources": [
    "ng://ngx-filepond/out/filepond.component.ts",
    "ng://ngx-filepond/out/filepond.module.ts"
  ],
  "sourcesContent": [
    "import { \n  Component,\n  ElementRef,\n  SimpleChanges,\n  ViewEncapsulation,\n  EventEmitter,\n  NgZone,\n  Output, \n  Input\n} from '@angular/core';\n\nimport {\n  create,\n  supported\n} from 'filepond';\n\n// We test if filepond is supported on the current client\nconst isSupported: Boolean = supported();\n\n// List of attributes for fallback input\nconst inputAttributes: Array<string> = [\n  'id', \n  'name',\n  'class', \n  'multiple', \n  'required', \n  'disabled',\n  'capture',\n  'accept'\n];\n\n// Methods not made available on the component\nconst filteredComponentMethods: Array<string> = [\n  'setOptions',\n  'on',\n  'off',\n  'onOnce',\n  'appendTo',\n  'insertAfter',\n  'insertBefore',\n  'isAttachedTo',\n  'replaceElement',\n  'restoreElement',\n  'destroy'\n];\n\nconst outputs: Array<string> = [\n  'oninit', \n  'onwarning', \n  'onerror', \n  'onactivatefile',\n  'onaddfilestart', \n  'onaddfileprogress', \n  'onaddfile', \n  'onprocessfilestart', \n  'onprocessfileprogress', \n  'onprocessfileabort', \n  'onprocessfilerevert', \n  'onprocessfile',\n  'onprocessfiles',\n  'onremovefile',\n  'onpreparefile',\n  'onupdatefiles'\n];\n\n// Component outline\n@Component({\n  selector: 'file-pond',\n  encapsulation: ViewEncapsulation.None,\n  template: `<div class=\"filepond--wrapper\">\n  <input type=\"file\"/>\n</div>`,\n  styles: [``],\n  outputs\n})\n\nexport class FilePondComponent {\n\n  @Input()\n  options: Object = {};\n\n  @Input()\n  files: Array<any>;\n\n  private root: ElementRef;\n  private zone: NgZone;\n  private pond: any;\n  private handleEvent: Function = null;\n\n  constructor(root: ElementRef, zone: NgZone) {\n    this.root = root;\n    this.zone = zone;\n\n    outputs.forEach(output => {\n      this[output] = new EventEmitter<any>();\n    });\n  }\n\n  ngAfterViewInit() {\n\n    const input = this.root.nativeElement.querySelector('input');\n\n    // transfer relevant attributes to input, this so we still have an input with the correct attributes should file pond not load\n    const attributes = this.root.nativeElement.attributes;\n    inputAttributes.forEach(name => {\n      const value = attributes[name] ? attributes[name].value : this.options[name];\n      if (!value) {\n        return;\n      }\n      input.setAttribute(name, value);\n    });\n\n    // no sufficient features supported in this browser\n    if (!isSupported) {\n      return;\n    }\n\n    // map FilePond events to Angular $emitters\n    this.handleEvent = (e) => {\n      this[`on${e.type.split(':')[1]}`].emit({...e.detail});\n    };\n    outputs.forEach(event => {\n      this.root.nativeElement.addEventListener(`FilePond:${ event.substr(2) }`, this.handleEvent);\n    });\n  \n    // will block angular from listening to events inside the pond\n    this.zone.runOutsideAngular(() => {\n      \n      // create instance\n      this.pond = create(input, {\n          // our options\n          ...this.options, \n\n          // our initial files\n          files: this.files\n        }\n      );\n\n    });\n\n    // Copy instance method references to component instance\n    Object.keys(this.pond)\n      \n      // remove unwanted methods\n      .filter(key => filteredComponentMethods.indexOf(key) === -1)\n      \n      // set method references from the component instance to the pond instance\n      .forEach(key => {\n        this[key] = this.pond[key];\n      });\n\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n\n    // no need to handle first change\n    if (changes.firstChange) {\n      return;\n    };\n\n    // no filepond instance available\n    if (!this.pond) {\n      return;\n    }\n\n    // use new options object as base ( or if not available, use current options )\n    const options = changes.options ? changes.options.currentValue : this.options;\n\n    // see if file list has changed\n    if (changes.files && JSON.stringify(changes.files.previousValue) !== JSON.stringify(changes.files.currentValue)) {\n     \n      // file list has changed\n      options.files = changes.files.currentValue;\n    }\n    \n    // set new options\n    this.pond.setOptions(options);\n  }\n\n  ngOnDestroy() {\n    if (!this.pond) {\n        return;\n    }\n\n    outputs.forEach(event => {\n      this.root.nativeElement.removeEventListener(`FilePond:${ event.substr(2) }`, this.handleEvent);\n    });\n\n    this.pond.destroy();\n  }\n\n}\n",
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FilePondComponent } from './filepond.component';\n\nexport { registerPlugin } from 'filepond';\n\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  declarations: [FilePondComponent],\n  exports: [\n    FilePondComponent\n  ]\n})\nexport class FilePondModule { }"
  ],
  "names": [
    "isSupported",
    "supported",
    "inputAttributes",
    "filteredComponentMethods",
    "outputs",
    "FilePondComponent",
    "root",
    "zone",
    "_this",
    "this",
    "options",
    "handleEvent",
    "forEach",
    "output",
    "EventEmitter",
    "prototype",
    "ngAfterViewInit",
    "input",
    "nativeElement",
    "querySelector",
    "attributes",
    "name",
    "value",
    "setAttribute",
    "e",
    "type",
    "split",
    "emit",
    "Object",
    "assign",
    "detail",
    "event",
    "addEventListener",
    "substr",
    "runOutsideAngular",
    "pond",
    "create",
    "files",
    "keys",
    "filter",
    "key",
    "indexOf",
    "ngOnChanges",
    "changes",
    "currentValue",
    "JSON",
    "stringify",
    "previousValue",
    "setOptions",
    "ngOnDestroy",
    "removeEventListener",
    "destroy",
    "Component",
    "args",
    "selector",
    "encapsulation",
    "ViewEncapsulation",
    "None",
    "template",
    "styles",
    "ElementRef",
    "NgZone",
    "Input",
    "FilePondModule",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports"
  ],
  "mappings": "6WAiBA,IAAMA,EAAuBC,EAAAA,YAGvBC,EAAiC,CACrC,KACA,OACA,QACA,WACA,WACA,WACA,UACA,UAIIC,EAA0C,CAC9C,aACA,KACA,MACA,SACA,WACA,cACA,eACA,eACA,iBACA,iBACA,WAGIC,EAAyB,CAC7B,SACA,YACA,UACA,iBACA,iBACA,oBACA,YACA,qBACA,wBACA,qBACA,sBACA,gBACA,iBACA,eACA,gBACA,iBAcFC,EAAA,WAaE,SAAFA,EAAcC,EAAkBC,GAA9B,IAAFC,EAAAC,KAVAA,KAAAC,QAAoB,GAQpBD,KAAAE,YAAkC,KAG9BF,KAAKH,KAAOA,EACZG,KAAKF,KAAOA,EAEZH,EAAQQ,QAAQ,SAAAC,GACdL,EAAKK,GAAU,IAAIC,EAAAA,sBAIvBT,EAAFU,UAAAC,gBAAE,WAAA,IAAFR,EAAAC,KAEUQ,EAAQR,KAAKH,KAAKY,cAAcC,cAAc,SAG9CC,EAAaX,KAAKH,KAAKY,cAAcE,WAC3ClB,EAAgBU,QAAQ,SAAAS,GACtB,IAAMC,EAAQF,EAAWC,GAAQD,EAAWC,GAAMC,MAAQd,EAAKE,QAAQW,GAClEC,GAGLL,EAAMM,aAAaF,EAAMC,KAItBtB,IAKLS,KAAKE,YAAc,SAACa,GAClBhB,EAAK,KAAKgB,EAAEC,KAAKC,MAAM,KAAK,IAAMC,KAAxCC,OAAAC,OAAA,GAAiDL,EAAEM,UAE/C1B,EAAQQ,QAAQ,SAAAmB,GACdvB,EAAKF,KAAKY,cAAcc,iBAAiB,YAAaD,EAAME,OAAO,GAAOzB,EAAKG,eAIjFF,KAAKF,KAAK2B,kBAAkB,WAG1B1B,EAAK2B,KAAOC,EAAAA,OAAOnB,EAAzBW,OAAAC,OAAA,GAEarB,EAAKE,QAFlB,CAKU2B,MAAO7B,EAAK6B,WAOlBT,OAAOU,KAAK7B,KAAK0B,MAGdI,OAAO,SAAAC,GAAO,OAA2C,IAA3CrC,EAAyBsC,QAAQD,KAG/C5B,QAAQ,SAAA4B,GACPhC,EAAKgC,GAAOhC,EAAK2B,KAAKK,OAK5BnC,EAAFU,UAAA2B,YAAE,SAAYC,GAGV,IAAIA,EAAR,aAKSlC,KAAK0B,KAAV,CAKA,IAAMzB,EAAUiC,EAApB,QAAsCA,EAAtC,QAAsDC,aAAenC,KAAKC,QAGlEiC,EAAR,OAAyBE,KAAKC,UAAUH,EAAxC,MAAsDI,iBAAmBF,KAAKC,UAAUH,EAAxF,MAAsGC,gBAGhGlC,EAAQ2B,MAAQM,EAAtB,MAAoCC,cAIhCnC,KAAK0B,KAAKa,WAAWtC,KAGvBL,EAAFU,UAAAkC,YAAE,WAAA,IAAFzC,EAAAC,KACSA,KAAK0B,OAIV/B,EAAQQ,QAAQ,SAAAmB,GACdvB,EAAKF,KAAKY,cAAcgC,oBAAoB,YAAanB,EAAME,OAAO,GAAOzB,EAAKG,eAGpFF,KAAK0B,KAAKgB,cAhHd,iBAVA,CAAA1B,KAAC2B,EAAAA,UAADC,KAAA,CAAW,CACTC,SAAU,YACVC,cAAeC,EAAAA,kBAAkBC,KACjCC,SAAU,kEAGVC,OAAQ,CAAC,IACTvD,QAAFA,yCAvEA,CAAAqB,KAAEmC,EAAAA,YAIF,CAAAnC,KAAEoC,EAAAA,4BAwEFnD,QAAA,CAAA,CAAAe,KAAGqC,EAAAA,QAGHzB,MAAA,CAAA,CAAAZ,KAAGqC,EAAAA,SCjFH,IAAAC,EAAA,2BAOA,CAAAtC,KAACuC,EAAAA,SAADX,KAAA,CAAU,CACRY,QAAS,CACPC,EAAAA,cAEFC,aAAc,CAAC9D,GACf+D,QAAS,CACP/D"
}
